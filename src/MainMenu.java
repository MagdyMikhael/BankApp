
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author engmagdymoheb
 */
public class MainMenu extends javax.swing.JFrame {
    private Bank bank;
    private String saveLocation=null;
    private final DefaultTableModel model;
    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        model = (DefaultTableModel) AccountsTable.getModel();
        setLocationRelativeTo(null);
        bank=new Bank();
        reloadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPanel = new javax.swing.JPanel();
        AddAccountButton = new javax.swing.JButton();
        RemoveAccountButton = new javax.swing.JButton();
        DepositButton = new javax.swing.JButton();
        WithdrawButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AccountsTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bank Application");

        AddAccountButton.setText("Add Account");
        AddAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAccountButtonActionPerformed(evt);
            }
        });

        RemoveAccountButton.setText("Remove Account");
        RemoveAccountButton.setEnabled(false);
        RemoveAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveAccountButtonActionPerformed(evt);
            }
        });

        DepositButton.setText("Deposit");
        DepositButton.setEnabled(false);
        DepositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositButtonActionPerformed(evt);
            }
        });

        WithdrawButton.setText("Withdraw");
        WithdrawButton.setEnabled(false);
        WithdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawButtonActionPerformed(evt);
            }
        });

        AccountsTable.setAutoCreateRowSorter(true);
        AccountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Account Number", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AccountsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AccountsTable.getTableHeader().setReorderingAllowed(false);
        AccountsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AccountsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AccountsTable);
        if (AccountsTable.getColumnModel().getColumnCount() > 0) {
            AccountsTable.getColumnModel().getColumn(0).setResizable(false);
            AccountsTable.getColumnModel().getColumn(1).setResizable(false);
            AccountsTable.getColumnModel().getColumn(2).setResizable(false);
            AccountsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(contentPanelLayout.createSequentialGroup()
                        .addComponent(AddAccountButton)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveAccountButton)
                        .addGap(18, 18, 18)
                        .addComponent(DepositButton)
                        .addGap(18, 18, 18)
                        .addComponent(WithdrawButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddAccountButton)
                    .addComponent(RemoveAccountButton)
                    .addComponent(DepositButton)
                    .addComponent(WithdrawButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileMenu.setText("File");

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddAccountButtonActionPerformed
        // TODO add your handling code here:
        AddAccountMenu menu=new AddAccountMenu(this,true,bank);
        menu.setVisible(true);
        if(menu.getCustomer() != null){
            addCutomerToTable(menu.getCustomer());
        }
            
    }//GEN-LAST:event_AddAccountButtonActionPerformed

    private void DepositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositButtonActionPerformed
        // TODO add your handling code here:
        depositOrWithdraw("deposit");
    }//GEN-LAST:event_DepositButtonActionPerformed

    private void WithdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawButtonActionPerformed
        // TODO add your handling code here:
        depositOrWithdraw("withdraw");
    }//GEN-LAST:event_WithdrawButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void RemoveAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveAccountButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow=AccountsTable.getSelectedRow();
        if(selectedRow >=0){
            Customer customer =getSelectedCustomer(selectedRow); 
            if(customer != null){
                bank.closeAccount(customer.getAccount().getAccountNumber());
                removeCustomerFromTable(selectedRow);
            }
        }
    }//GEN-LAST:event_RemoveAccountButtonActionPerformed

    private void AccountsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AccountsTableMouseClicked
        // TODO add your handling code here:
        setAccountButtonsActive(true);
        
        if(evt.getClickCount() == 2){
            // create our account details page
            int selectedRow=AccountsTable.getSelectedRow();
            if(selectedRow >=0){
                Customer customer =getSelectedCustomer(selectedRow); 
                if(customer != null){
                    AccountDetailsPage page=new AccountDetailsPage(this, true,bank, customer);
                    page.setVisible(true);
                }
            }
            
        }
    }//GEN-LAST:event_AccountsTableMouseClicked

    private boolean saveFile(String fileName){
        try{
            FileOutputStream fOut=new FileOutputStream(fileName);
            ObjectOutputStream objOut=new ObjectOutputStream(fOut);
            objOut.writeObject(bank);
            objOut.close();
            fOut.close();
            return true;
        }catch(IOException e){
            return false;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }
    private void addCutomerToTable(Customer customer){
        DefaultTableModel model=(DefaultTableModel) AccountsTable.getModel();
        //model.addRow(new Object[]{customer.getFirstName(),customer.getLastName(),customer.getAccount().getAccountNumber(),customer.getAccount().getBalance()});
        model.addRow(new Object[]{});
        reloadCutomerRowData(customer, model.getRowCount()-1);
        
    }
    
    private void removeCustomerFromTable(int selectedRow){
        DefaultTableModel model=(DefaultTableModel) AccountsTable.getModel();
        model.removeRow(selectedRow);
    }
    private void reloadCutomerRowData(Customer customer, int selectedRow) {
        DefaultTableModel model=(DefaultTableModel) AccountsTable.getModel();
        model.setValueAt(customer.getFirstName(), selectedRow, 0);
        model.setValueAt(customer.getLastName(), selectedRow, 1);
        model.setValueAt(customer.getAccount().getAccountNumber(), selectedRow, 2);
        model.setValueAt(String.format("%.2f",customer.getAccount().getBalance()), selectedRow, 3);
    }
    private void reloadTable(){
        for(Customer c:bank.getCustomers()){
            addCutomerToTable(c);
        }
    }
    
    private Customer getSelectedCustomer(int selectedRow){
        Customer customer=null;
        
        if(selectedRow >= 0){
            int accountNumber=(int)AccountsTable.getValueAt(selectedRow, 2);
            customer = bank.getCustomer(accountNumber);
        }
        
        return customer;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AccountsTable;
    private javax.swing.JButton AddAccountButton;
    private javax.swing.JButton DepositButton;
    private javax.swing.JButton RemoveAccountButton;
    private javax.swing.JButton WithdrawButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

    private void setAccountButtonsActive(boolean active) {
        RemoveAccountButton.setEnabled(active);
        DepositButton.setEnabled(active);
        WithdrawButton.setEnabled(active);
    }
    private void depositOrWithdraw(String action) {
        int selectedRow = AccountsTable.getSelectedRow();
        Customer customer = getSelectedCustomer(selectedRow);
        if (customer != null) {
            javax.swing.JDialog window = null;
            if (action.equals("deposit")) {
                window = new DepositMenu(this, true, bank, customer);
            }
            else if (action.equals("withdraw")) {
                window = new WithdrawMenu(this, true, bank, customer);
            }
            if (window != null) {
                window.setVisible(true);
            }
            reloadCustomerRowData(selectedRow, customer.getAccount().getAccountNumber());
        }
    }
    
    private void reloadCustomerRowData(int selectedRow, int accountId) {
        Customer customer = bank.getCustomer(accountId);
        model.setValueAt(customer.getFirstName(), selectedRow, 0);
        model.setValueAt(customer.getLastName(), selectedRow, 1);
        model.setValueAt(customer.getAccount().getAccountNumber(), selectedRow, 2);
        model.setValueAt(String.format("%.2f", customer.getAccount().getBalance()), selectedRow, 3);
}
    
}
